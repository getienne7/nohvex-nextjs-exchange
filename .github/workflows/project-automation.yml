name: Project Board Automation (Next Sprint)

on:
  issues:
    types: [opened, assigned, closed]
  pull_request:
    types: [opened, edited, closed]

permissions:
  contents: read
  issues: write
  pull-requests: write
  projects: write

jobs:
  automate-project:
    runs-on: ubuntu-latest
    steps:
      - name: Automate classic project columns
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const PROJECT_NAME = 'Next Sprint';
            const TODO = 'To do';
            const IN_PROGRESS = 'In progress';
            const IN_REVIEW = 'In review';
            const DONE = 'Done';

            const owner = context.repo.owner;
            const repo = context.repo.repo;

            async function getProjectByName(name) {
              const { data } = await github.request('GET /repos/{owner}/{repo}/projects', { owner, repo, headers: { Accept: 'application/vnd.github.inertia-preview+json' }, per_page: 100 });
              return data.find(p => p.name === name);
            }

            async function getColumns(projectId) {
              const { data } = await github.request('GET /projects/{project_id}/columns', { project_id: projectId, headers: { Accept: 'application/vnd.github.inertia-preview+json' }, per_page: 100 });
              const map = {};
              for (const c of data) map[c.name] = c;
              return map;
            }

            async function listCards(columnId) {
              const cards = [];
              let page = 1;
              while (true) {
                const { data } = await github.request('GET /projects/columns/{column_id}/cards', { column_id: columnId, headers: { Accept: 'application/vnd.github.inertia-preview+json' }, per_page: 100, page });
                cards.push(...data);
                if (data.length < 100) break;
                page++;
              }
              return cards;
            }

            async function findCardForContent(columns, contentUrl) {
              for (const col of Object.values(columns)) {
                const cards = await listCards(col.id);
                for (const card of cards) {
                  if (card.content_url === contentUrl) {
                    return { card, column: col };
                  }
                }
              }
              return null;
            }

            async function ensureCardInColumn(columns, targetColumnName, content) {
              const contentUrl = content.url; // issues or PR API URL
              const existing = await findCardForContent(columns, contentUrl);
              const targetColumn = columns[targetColumnName];
              if (!targetColumn) throw new Error(`Column not found: ${targetColumnName}`);

              if (!existing) {
                await github.request('POST /projects/columns/{column_id}/cards', {
                  column_id: targetColumn.id,
                  headers: { Accept: 'application/vnd.github.inertia-preview+json' },
                  content_id: content.id,
                  content_type: content.pull_request ? 'PullRequest' : 'Issue'
                });
                core.info(`Created card in '${targetColumnName}' for ${content.pull_request ? 'PR' : 'Issue'} #${content.number}`);
                return;
              }

              if (existing.column.id !== targetColumn.id) {
                await github.request('POST /projects/columns/cards/{card_id}/moves', {
                  card_id: existing.card.id,
                  headers: { Accept: 'application/vnd.github.inertia-preview+json' },
                  position: 'top',
                  column_id: targetColumn.id
                });
                core.info(`Moved card for #${content.number} to '${targetColumnName}'`);
              } else {
                core.info(`Card for #${content.number} already in '${targetColumnName}'`);
              }
            }

            // Main flow
            const project = await getProjectByName(PROJECT_NAME);
            if (!project) {
              core.setFailed(`Project '${PROJECT_NAME}' not found in repo ${owner}/${repo}.`);
              return;
            }
            const columns = await getColumns(project.id);

            if (context.eventName === 'issues') {
              const issue = context.payload.issue;
              if (!issue) return;
              if (context.payload.action === 'opened') {
                await ensureCardInColumn(columns, TODO, issue);
              } else if (context.payload.action === 'assigned') {
                await ensureCardInColumn(columns, IN_PROGRESS, issue);
              } else if (context.payload.action === 'closed') {
                await ensureCardInColumn(columns, DONE, issue);
              }
            } else if (context.eventName === 'pull_request') {
              const pr = context.payload.pull_request;
              if (!pr) return;

              // Extract referenced issues via "Closes #123" patterns
              const body = pr.body || '';
              const issueNumbers = Array.from(body.matchAll(/(?:close[sd]?|fix(?:e[sd])?|resolve[sd]?)\s+#(\d+)/gi)).map(m => Number(m[1]));

              if (context.payload.action === 'opened' || context.payload.action === 'edited') {
                // Move referenced issues to In review
                for (const num of issueNumbers) {
                  try {
                    const { data: issue } = await github.request('GET /repos/{owner}/{repo}/issues/{issue_number}', { owner, repo, issue_number: num });
                    await ensureCardInColumn(columns, IN_REVIEW, issue);
                  } catch (e) {
                    core.warning(`Could not move issue #${num} to '${IN_REVIEW}': ${e.message}`);
                  }
                }
              } else if (context.payload.action === 'closed') {
                if (pr.merged) {
                  // Move referenced issues to Done
                  for (const num of issueNumbers) {
                    try {
                      const { data: issue } = await github.request('GET /repos/{owner}/{repo}/issues/{issue_number}', { owner, repo, issue_number: num });
                      await ensureCardInColumn(columns, DONE, issue);
                    } catch (e) {
                      core.warning(`Could not move issue #${num} to '${DONE}': ${e.message}`);
                    }
                  }
                }
              }
            }
