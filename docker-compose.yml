# Production Docker Compose Configuration for NOHVEX Exchange
# This file defines the production deployment setup

services:
  postgres:
    image: postgres:16
    container_name: nohvex-exchange-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-nohvex}
      POSTGRES_USER: ${POSTGRES_USER:-nohvex}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-nohvex} -d ${POSTGRES_DB:-nohvex}",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - nohvex-network

  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: nohvex-exchange-web
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-nohvex}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-nohvex}?schema=public
      DIRECT_URL: postgresql://${POSTGRES_USER:-nohvex}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-nohvex}?schema=public
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      PORT: 3000
      HOSTNAME: "0.0.0.0"
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - nohvex-network
    # Resource limits for production
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"
        reservations:
          memory: 512M
          cpus: "0.25"

  # Redis for session storage and caching (optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: nohvex-exchange-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - nohvex-network

  # Nginx reverse proxy (optional for production)
  nginx:
    image: nginx:alpine
    container_name: nohvex-exchange-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    networks:
      - nohvex-network
    profiles:
      - nginx # Use with: docker-compose --profile nginx up

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  nohvex-network:
    driver: bridge
