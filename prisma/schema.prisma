// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output = "../node_modules/.prisma/client"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Password reset fields
  resetToken    String?   @unique
  resetExpires  DateTime?

  // 2FA fields (persisted)
  twoFAEnabled     Boolean   @default(false)
  twoFASecret      String?
  twoFABackupCodes Json?
  twoFAEnabledAt   DateTime?
  twoFALastUsed    DateTime?
  
  accounts      Account[]
  sessions      Session[]
  portfolio     Portfolio[]
  transactions  Transaction[]
  alerts        Alert[]
  walletConnections WalletConnection[]
  portfolioOptimizations PortfolioOptimization[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Portfolio {
  id          String   @id @default(cuid())
  userId      String
  symbol      String   // BTC, ETH, etc.
  name        String   // Bitcoin, Ethereum, etc.
  amount      Float
  averagePrice Float
  totalValue  Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, symbol])
}

model Transaction {
  id          String      @id @default(cuid())
  userId      String
  type        TransactionType
  symbol      String      // BTC, ETH, etc.
  amount      Float
  price       Float
  totalValue  Float
  fee         Float       @default(0)
  status      TransactionStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Alert {
  id              String   @id @default(cuid())
  userId          String
  symbol          String
  operator        AlertOperator // GT or LT
  threshold       Float
  active          Boolean  @default(true)
  cooldownMinutes Int      @default(10)
  lastTriggeredAt DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, symbol])
}

enum TransactionType {
  BUY
  SELL
  DEPOSIT
  WITHDRAWAL
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum AlertOperator {
  GT
  LT
}

// Web3 Wallet Integration Models
model WalletConnection {
  id          String   @id @default(cuid())
  userId      String
  address     String
  chainId     Int
  walletType  WalletType
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  assets      WalletAsset[]
  optimizations PortfolioOptimization[]
  
  @@unique([userId, address, chainId])
  @@index([userId])
  @@index([address])
}

model WalletAsset {
  id              String   @id @default(cuid())
  walletId        String
  tokenAddress    String   // Contract address (0x0 for native tokens)
  symbol          String
  name            String
  balance         String   // Use string for precise decimal handling
  decimals        Int
  chainId         Int
  usdValue        Float?
  logoUrl         String?
  lastUpdated     DateTime @default(now())
  
  wallet          WalletConnection @relation(fields: [walletId], references: [id], onDelete: Cascade)
  
  @@unique([walletId, tokenAddress])
  @@index([walletId])
  @@index([symbol])
}

enum WalletType {
  METAMASK
  WALLETCONNECT
  COINBASE_WALLET
  TRUST_WALLET
  OTHER
}

// Portfolio Optimization Analytics
model PortfolioOptimization {
  id                    String   @id @default(cuid())
  userId                String
  walletId              String
  chainId               Int
  riskTolerance         Int
  currentYield          Float
  optimizedYield        Float
  potentialGain         Float
  recommendationsCount  Int
  overallRisk           Float
  diversificationScore  Float
  createdAt             DateTime @default(now())
  
  user                  User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallet                WalletConnection @relation(fields: [walletId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([walletId])
  @@index([createdAt])
}
